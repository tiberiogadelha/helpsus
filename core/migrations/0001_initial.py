# Generated by Django 3.2.4 on 2021-07-31 13:30

import core.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateField(auto_now=True, verbose_name='Updated at')),
                ('name', models.CharField(max_length=140, verbose_name='Nome')),
                ('birth_date', models.DateField(verbose_name='Data de nascimento')),
                ('gender', models.CharField(choices=[('f', 'Feminino'), ('m', 'Masculino'), ('o', 'Outro')], max_length=1, verbose_name='Sexo')),
                ('cns', models.CharField(blank=True, max_length=20, verbose_name='CNS')),
                ('cpf', models.CharField(blank=True, max_length=11, verbose_name='CPF')),
                ('city', models.CharField(default='Campina Grande', max_length=60, verbose_name='Cidade')),
                ('uf', models.CharField(choices=[('AC', 'Acre'), ('AL', 'Alagoas'), ('AM', 'Amazonas'), ('AP', 'Amapá'), ('BA', 'Bahia'), ('CE', 'Ceará'), ('DF', 'Distrito Federal'), ('ES', 'Espirito Santo'), ('GO', 'Goiás'), ('MA', 'Maranhão'), ('MT', 'Mato Grosso'), ('MS', 'Mato Grosso do Sul'), ('MG', 'Minas Gerais'), ('PA', 'Pará'), ('PB', 'Paraíba'), ('PR', 'Paraná'), ('PE', 'Pernambuco'), ('PI', 'Piauí'), ('RJ', 'Rio de Janeiro'), ('RN', 'Rio Grande do Norte'), ('RO', 'Roraima'), ('RS', 'Rio Grande do Sul'), ('RR', 'Roraima'), ('SC', 'Santa Catarina'), ('SE', 'Sergipe'), ('SP', 'São Paulo'), ('TO', 'Tocantins')], max_length=2, verbose_name='Estado')),
                ('street', models.CharField(max_length=150, verbose_name='Rua')),
                ('neighborhood', models.CharField(max_length=70, verbose_name='Bairro')),
                ('num', models.CharField(max_length=10, verbose_name='Número')),
            ],
            options={
                'verbose_name': ('Paciente',),
                'verbose_name_plural': 'Pacientes',
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cod', models.CharField(choices=[('biom', 'Biomédico/Biomédica'), ('bioq', 'Bioquímico/Bioquímica'), ('enf', 'Enfermeiro/Enfermeira'), ('med', 'Médico/Médica'), ('dig', 'Digitador/Digitadora'), ('rec', 'Recepcionista'), ('farm', 'Farmacêutico/Farmacêutica'), ('tec', 'Técnico'), ('coord', 'Coordenador/Coordenadora'), ('dir', 'Diretor/Diretora')], max_length=20, verbose_name='Código')),
                ('name', models.CharField(max_length=150, verbose_name='Masculino')),
                ('f_name', models.CharField(max_length=150, verbose_name='Feminino')),
            ],
            options={
                'verbose_name': ('Cargo',),
                'verbose_name_plural': 'Cargos',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateField(auto_now=True, verbose_name='Updated at')),
                ('name', models.CharField(max_length=140, verbose_name='Nome')),
                ('email', models.EmailField(max_length=120, verbose_name='Email')),
                ('password', models.CharField(default='23232', max_length=300, verbose_name='Senha')),
                ('re_password', models.CharField(default='', max_length=300, verbose_name='Confirmação da senha')),
                ('birth_date', models.DateField(verbose_name='Birth Date')),
                ('gender', models.CharField(choices=[('f', 'Feminino'), ('m', 'Masculino'), ('o', 'Outro')], max_length=1, verbose_name='Sexo')),
                ('is_enabled', models.BooleanField(default=False, verbose_name='Está habilitado')),
                ('conselho', models.CharField(default=0, max_length=120, verbose_name='Conselho')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.role', verbose_name='Cargo')),
            ],
            options={
                'verbose_name': 'Funcionário',
                'verbose_name_plural': 'Funcionários',
            },
        ),
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email')),
                ('first_name', models.CharField(max_length=50, verbose_name='Primeiro nome')),
                ('last_name', models.CharField(max_length=250, verbose_name='Sobrenome')),
                ('birth_date', models.DateField(verbose_name='Data de nascimento')),
                ('gender', models.CharField(choices=[('f', 'Feminino'), ('m', 'Masculino'), ('o', 'Outro')], default='o', max_length=1, verbose_name='Sexo')),
                ('is_enabled', models.BooleanField(default=False, verbose_name='Está habilitado')),
                ('conselho', models.CharField(blank=True, max_length=120, null=True, verbose_name='Conselho')),
                ('created_at', models.DateField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateField(auto_now=True, verbose_name='Updated at')),
                ('reqPwd', models.DateField(auto_now_add=True, verbose_name='Solicitação recuperação de senha')),
                ('pwdTries', models.IntegerField(default=0, verbose_name='Tentativas de senha')),
                ('pwdUrl', models.CharField(default='none', max_length=150, verbose_name='URL senha')),
                ('code', models.IntegerField(default=0, verbose_name='Código')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('role', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='core.role', verbose_name='Cargo')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', core.models.UserManager()),
            ],
        ),
    ]
